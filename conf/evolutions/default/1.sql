
# --- !Ups
CREATE TABLE IF NOT EXISTS USERS(
ID SERIAL PRIMARY KEY NOT NULL,
FIRST_NAME char(100) NOT NULL,
LAST_NAME  char(100) NOT NULL,
EMAIL  char(255) NOT NULL UNIQUE,
EMAIL_CONFIRMED   BOOLEAN NOT NULL,
PASSWORD  char(255) NOT NULL,
HEADLINE CHAR(150),
BIO  CHAR(1500),
URL_PHOTO_PROFILE TEXT NOT NULL,
SERVICES char(50) NOT NULL,
REGISTRATION_DATE  timestamp NOT NULL
);

CREATE TABLE IF NOT EXISTS ARTICLES(
ID SERIAL PRIMARY KEY NOT NULL,
AUTHOR_ID INT NOT NULL,
CREATION_DATE timestamp NOT NULL,
LAST_UPDATE timestamp NOT NULL,
TITLE  TEXT NOT NULL,
SUMMARY TEXT,
CONTENT  TEXT NOT NULL,
NB_MODIFICATIONS  INT NOT NULL,
READING_TIME  INT NOT NULL,
TAG1 char(100) NOT NULL,
TAG2 char(100)
);

CREATE TABLE IF NOT EXISTS COMMENTS(
ID SERIAL PRIMARY KEY NOT NULL,
USER_ID INT NOT NULL,
ARTICLE_ID INT NOT NULL,
CREATION_DATE timestamp NOT NULL,
LAST_UPDATE timestamp NOT NULL,
CONTENT TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS VIEWS(
ID SERIAL PRIMARY KEY NOT NULL,
USER_ID INT NOT NULL,
ARTICLE_ID INT NOT NULL,
VIEW_DATE timestamp NOT NULL
);

CREATE TABLE IF NOT EXISTS LIKES(
ID SERIAL PRIMARY KEY NOT NULL,
USER_ID INT NOT NULL,
ARTICLE_ID INT NOT NULL,
LIKE_DATE timestamp NOT NULL
);

CREATE TABLE IF NOT EXISTS COMMENTS(
ID SERIAL PRIMARY KEY NOT NULL,
USER_ID INT NOT NULL,
ARTICLE_ID INT NOT NULL,
COMMENT_ID INT NOT NULL,
COMMENT_DATE timestamp NOT NULL
);


CREATE TABLE IF NOT EXISTS tags(
ID SERIAL PRIMARY KEY NOT NULL,
NAME char(100) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS taggings(
ID SERIAL PRIMARY KEY NOT NULL,
TAG_NAME char(100) NOT NULL,
ARTICLE_ID INT NOT NULL,
TAGGING_DATE  timestamp NOT NULL
);

CREATE TABLE IF NOT EXISTS follows(
ID SERIAL PRIMARY KEY NOT NULL,
FOLLOWER_id INT NOT NULL,
AUTHOR_ID INT NOT NULL,
FOLLOW_DATE timestamp NOT NULL
);

CREATE MATERIALIZED VIEW IF NOT EXISTS articles_views AS(
SELECT articles.id AS article_id,
COUNT(views.id) AS nb_views
FROM articles 
LEFT JOIN views ON articles.id = views.article_id
GROUP BY articles.id
);


CREATE MATERIALIZED VIEW IF NOT EXISTS articles_likes AS(
SELECT articles.id AS article_id,
COUNT(likes.id) AS nb_likes
FROM articles 
LEFT JOIN likes ON articles.id = likes.article_id
GROUP BY articles.id
);

CREATE MATERIALIZED VIEW IF NOT EXISTS articles_comments AS(
SELECT articles.id AS article_id,
COUNT(comments.id) AS nb_comments
FROM articles 
LEFT JOIN comments ON articles.id = comments.article_id
GROUP BY articles.id
);

CREATE MATERIALIZED VIEW IF NOT EXISTS authors_followers AS(
SELECT users.id AS author_id,
COUNT(follows.id) AS nb_follower
FROM users 
LEFT JOIN follows ON users.id = follows.author_id
GROUP BY users.id
);

REFRESH MATERIALIZED VIEW articles_views;
REFRESH MATERIALIZED VIEW articles_likes;
REFRESH MATERIALIZED VIEW articles_comments;
REFRESH MATERIALIZED VIEW authors_followers;

# --- !Downs

DROP TABLE USERS;
DROP TABLE ARTICLES;